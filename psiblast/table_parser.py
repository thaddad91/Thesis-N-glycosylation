#!/usr/bin/env python3

"""
author: Thierry Haddad
description: Parses sequon windows (15 aminoa acids) from the ASCII PSSM
             generated by psiblast. Does this for every sequon for every
             protein in the dataset.
"""

import os, sys

def read_table():
    """Read the current dataset as nested list."""
    print("Reading input table...")
    data_f = "/mnt/scratch/hadda003/sequon_physchem_props.txt"  #negative_set/pos_neg_table.txt"
    with open(data_f, "r") as f:
        data = f.readlines()
    return data

def parse_pssms(data):
    """Find corresponding pssms for every protein in the table dataset."""
    print("Parsing pssms...")
    new_data = []
    new_data.append(data[0])
    for c, line in enumerate(data[1:], 1):
        line = line.split("\t")
        id_ = line[0]  # TAIR ID
        label = line[1]  # pos/neg class
        file_ = "{}_{}".format(label, id_)  # PSSM file and dir name
        try:
            with open("/mnt/scratch/hadda003/individual_psiblasts/{}.txt".format(file_), "r") as f:
                pssm = f.readlines()
        except:
            try:
                label2 = "neg" if label == "pos" else "pos"
                with open("/mnt/scratch/hadda003/individual_psiblasts/{}_{}.txt".format(label2, id_), "r") as f:
                    pssm = f.readlines()
            except:
                print(id_)
                continue  # Pass to next protein
        """
        pssm_header = pssm[2].split()[:20]
        # Add header only once to data table
        #print(type(data[0]), type(pssm_header))
        if pssm_header not in data[0]:
            data[0] = data[0].rstrip()+pssm_header+"\n"
            print(data[0])
        """

        sequon = int(line[2])  # Sequon index
        window = pssm[(sequon)-4:(sequon)+11]  # Relevant line window
        newline = data[c].rstrip("\n")
        # Per amino acid, append the secondary structure values
        newline += "\t"
        for aa in window:
            newline += "\t" # Tab between 20 AA values
            newline += "\t".join([val for val in aa.split()[2:22]])
        # Add new line with 20 AA values to new data set
        new_data.append(newline+"\n")

    # Write away new data set
    print("Writing new set...")
    with open("physchem_psiblast.txt","w") as f:
        for line in new_data:
            f.write(line)

if __name__ == "__main__":
    data = read_table()
    parse_pssms(data)
